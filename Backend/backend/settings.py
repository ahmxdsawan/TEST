"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 3.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import configparser
import logging
from pathlib import Path
from datetime import timedelta
from cryptography.fernet import Fernet
from logging.handlers import TimedRotatingFileHandler
from botocore.exceptions import ClientError
import os
import environ
import json
import boto3
from dotenv import load_dotenv
from api.auth.saml.saml_settings import create_saml_settings

load_dotenv()

config = configparser.ConfigParser()
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
log_format = "%(asctime)s: %(levelname)s: %(name)s %(funcName)s: %(message)s"
logging.basicConfig(format=log_format)

DEBUG_API = True
DEBUG = False

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialise environment variables
env = environ.Env()
env.read_env(os.path.join(BASE_DIR, ".env"))  # Explicitly specify the file path


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

ENCRYPTED_AWS_ACCESS_KEY_ID = os.getenv('ENCRYPTED_AWS_ACCESS_KEY_ID')
ENCRYPTED_AWS_SECRET_ACCESS_KEY = os.getenv('ENCRYPTED_AWS_SECRET_ACCESS_KEY')
Encrypt_AWS_key_Value = os.getenv('Encrypt_AWS_key_Value')

def decrypt_aws_credentials():
    key = Encrypt_AWS_key_Value.encode()
    cipher_suite = Fernet(key)
    aws_access_key_id = cipher_suite.decrypt(ENCRYPTED_AWS_ACCESS_KEY_ID).decode()
    aws_secret_access_key = cipher_suite.decrypt(ENCRYPTED_AWS_SECRET_ACCESS_KEY).decode()
    return aws_access_key_id, aws_secret_access_key

AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY = decrypt_aws_credentials()

def get_logger(name=__name__):
    logger = logging.getLogger(name)
    if DEBUG_API:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)

    formatter = logging.Formatter(log_format)
    fh = TimedRotatingFileHandler("./logs/server.log", when="d", interval=1, backupCount=14)
    fh.setFormatter(formatter)
    fh.setLevel(logging.DEBUG) if DEBUG_API else logger.setLevel(logging.INFO)
    logger.addHandler(fh)

    return logger

# SECURITY WARNING: keep the secret key used in production secret!
def get_secret():
    secret_name = "CSEye-App-Secret-Keys-Staging"
    region_name = "us-east-1"
    session = boto3.session.Session(
        aws_access_key_id = AWS_ACCESS_KEY_ID,
        aws_secret_access_key = AWS_SECRET_ACCESS_KEY,
        region_name=region_name
    )
    client = session.client(
        service_name='secretsmanager',
        region_name=region_name
    )
    try:
        get_secret_value_response = client.get_secret_value(
            SecretId=secret_name
        )
    except ClientError as e:
        raise e
    secret = get_secret_value_response['SecretString']
    return json.loads(secret)

secrets = get_secret()

# ids / secrets for review@recurrentenergy.com account 
CLIENT_ID = secrets['clientId']
CLIENT_SECRET = secrets['clientSecret']
TENANT_ID = secrets['tenantId']
AUTHORITY = f"https://login.microsoftonline.com/{TENANT_ID}"
USER_ID = secrets['userId']
EMAIL_ENDPOINT = f'https://graph.microsoft.com/v1.0/users/{USER_ID}/sendMail'

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = secrets['jwtSecretKey']

STATIC_URL = '/static/'

# Optional (if serving static files in development)
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

#SAML Credentials
ENV = 'LOCAL' #LOCAL/ SIT/ UAT/ PROD

SSO_IDP_ENTITY_ID= secrets['ssoIdpEntityId']
SSO_MS_URL= secrets['ssoMsUrl']
SSO_CERTIFICATE= secrets['ssoCertificate']

if ENV == 'LOCAL':
    SSO_SP_ENTITY_ID= secrets['ssoSpEntityIdLocal']
    SSO_SP_REDIRECT= secrets['ssoSpRedirectLocal']
elif ENV == 'SIT':
    SSO_SP_ENTITY_ID= secrets['ssoSpEntityIdSIT']
    SSO_SP_REDIRECT= secrets['ssoSpRedirectSIT']
    HTTP_HOST = secrets['ssoHttpHostSIT']
elif ENV == 'UAT':
    SSO_SP_ENTITY_ID= secrets['ssoSpEntityIdUAT']
    SSO_SP_REDIRECT= secrets['ssoSpRedirectUAT']
    HTTP_HOST = secrets['ssoHttpHostUAT']
elif ENV == 'PROD':
    SSO_SP_ENTITY_ID= secrets['ssoSpEntityIdPROD']
    SSO_SP_REDIRECT= secrets['ssoSpRedirectPROD']
    HTTP_HOST = secrets['ssoHttpHostPROD']
    SSO_CERTIFICATE= secrets['ssoCertificatePROD']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

SOCIALACCOUNT_PROVIDERS = {
    "microsoft": {
        "APP": {
            "client_id": CLIENT_ID,
            "secret": CLIENT_SECRET,
            "key": "",
        },
        "SCOPE": [
            "openid",
            "profile",
            "email",
            "offline_access",
            "User.Read",
        ],
        "AUTH_PARAMS": {"response_type": "code"},
    }
}

ACCOUNT_PROVIDERS = {
    "microsoft": {
        "APP": {
            "client_id": CLIENT_ID,
            "secret": CLIENT_SECRET,
        }
    }
}

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Required for social auth

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.microsoft',

    'api',
    'api.auth.jwt',
    'api.auth.saml',
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt',
    'drf_yasg',
    'onelogin.saml2',
]
SITE_ID = 1  # Required by allauth

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',  # Default
    'allauth.account.auth_backends.AuthenticationBackend',  # Social Auth
)


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
    ),
}

SAML_SETTINGS = create_saml_settings()


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': 'your_secret_key_here',
}

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "unique-sessions",
    }
}


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

CORS_ALLOW_CREDENTIALS = True  # Allow cookies & authentication
CORS_ALLOWED_ORIGINS = [
    "http://localhost:4200", 
    "http://127.0.0.1:8000",  
    "http://localhost:8000",  
]
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:4200",  # Prevent CSRF issues
    "http://127.0.0.1:8000",
    "http://localhost:8000",
]

# SECURE_SSL_REDIRECT = True
# SECURE_HSTS_SECONDS = 3600  # HTTP Strict Transport Security
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# SECURE_HSTS_PRELOAD = True

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # Default to MySQL
        'NAME': 'my_database',
        'USER': 'root',
        'PASSWORD': 'password123',
        'HOST': 'localhost',
        'PORT': '3306',
        'OPTIONS': {
            'charset': 'utf8mb4',
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"
        }
    },
    'postgres': {
        'ENGINE': 'django.db.backends.postgresql',  # PostgreSQL as secondary
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': 'password123',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

# Uses MySQL automatically
# mysql_objects = MyModel.objects.all()

# Uses PostgreSQL only when specified
# postgres_objects = MyModel.objects.using('postgres').all()

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


